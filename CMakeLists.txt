cmake_minimum_required(VERSION 3.1)
project(costmap_converter)

# Set to Release in order to speed up the program significantly
if (NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release) #None, Debug, Release, RelWithDebInfo, MinSizeRel
endif()
## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  geometry_msgs
  roscpp
  std_msgs
  message_generation
  costmap_2d
  dynamic_reconfigure
  pluginlib
  cv_bridge
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)
find_package(OpenCV REQUIRED)

###set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR})
###find_package(Eigen3 REQUIRED)
###set(EXTERNAL_INCLUDE_DIRS ${Eigen3_INCLUDE_DIRS})

if (CATKIN_ENABLE_TESTING)
  find_package(rostest REQUIRED)
endif()

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

## C++11 support
IF(NOT MSVC)
  include(CheckCXXCompilerFlag)
  CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
  CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
  message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support which is required 
  by linked third party packages starting from ROS Jade. Ignore this message for ROS Indigo.")
endif()
endif()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependencies might have been
##     pulled in transitively but can be declared for certainty nonetheless:
##     * add a build_depend tag for "message_generation"
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
add_message_files(
  FILES
  ObstacleMsg.msg
  ObstacleArrayMsg.msg
)

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
generate_messages(
   DEPENDENCIES
   geometry_msgs std_msgs
)

#add dynamic reconfigure api
#find_package(catkin REQUIRED dynamic_reconfigure)
generate_dynamic_reconfigure_options(
  cfg/dynamic_reconfigure/CostmapToPolygonsDBSMCCH.cfg
  cfg/dynamic_reconfigure/CostmapToPolygonsDBSConcaveHull.cfg
  cfg/dynamic_reconfigure/CostmapToLinesDBSMCCH.cfg
  cfg/dynamic_reconfigure/CostmapToLinesDBSRANSAC.cfg
  cfg/dynamic_reconfigure/CostmapToDynamicObstacles.cfg
)

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include
  LIBRARIES costmap_converter
  CATKIN_DEPENDS 
    geometry_msgs
    pluginlib
    roscpp 
    std_msgs
    message_runtime 
    dynamic_reconfigure
    costmap_2d
  #DEPENDS 
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  include
  ${catkin_INCLUDE_DIRS}
  ${OpenCV_INCLUDE_DIRS}
)

## Declare a cpp library
add_library(costmap_converter   src/costmap_to_polygons.cpp 
                                src/costmap_to_polygons_concave.cpp
                                src/costmap_to_lines_convex_hull.cpp
                                src/costmap_to_lines_ransac.cpp
                                src/costmap_to_dynamic_obstacles/costmap_to_dynamic_obstacles.cpp
                                src/costmap_to_dynamic_obstacles/background_subtractor.cpp
                                src/costmap_to_dynamic_obstacles/blob_detector.cpp
                                src/costmap_to_dynamic_obstacles/multitarget_tracker/Ctracker.cpp
                                src/costmap_to_dynamic_obstacles/multitarget_tracker/Kalman.cpp
                                src/costmap_to_dynamic_obstacles/multitarget_tracker/HungarianAlg.cpp
)
target_link_libraries(costmap_converter ${catkin_LIBRARIES} ${OpenCV_LIBRARIES})
# target_compile_features(costmap_converter PUBLIC cxx_nullptr cxx_range_for)

# Dynamic reconfigure: make sure configure headers raare built before any node using them
add_dependencies(costmap_converter ${PROJECT_NAME}_gencfg)
# Generate messages before compiling the lib
add_dependencies(costmap_converter ${PROJECT_NAME}_generate_messages_cpp)

## Declare a cpp executable
add_executable(standalone_converter src/costmap_converter_node.cpp)
target_link_libraries(standalone_converter ${catkin_LIBRARIES} )
add_dependencies(standalone_converter costmap_converter)
  
# (un)set: cmake -DCVV_DEBUG_MODE=OFF ..
option(CVV_DEBUG_MODE "cvvisual-debug-mode" ON)
if(CVV_DEBUG_MODE MATCHES ON)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DCVVISUAL_DEBUGMODE")
endif()



#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation

## Mark executables and/or libraries for installation
install(TARGETS costmap_converter
   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
)
install(TARGETS standalone_converter
   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

## Mark cpp header files for installation
install(DIRECTORY include/${PROJECT_NAME}/
   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
   #FILES_MATCHING PATTERN "*.h"
   PATTERN ".svn" EXCLUDE
)

## Mark other files for installation (e.g. launch and bag files, etc.)
install(FILES
  plugins.xml
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
)

install(DIRECTORY
  cfg
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
  PATTERN ".svn" EXCLUDE
)


#############
## Testing ##
#############

if (CATKIN_ENABLE_TESTING)
  add_rostest_gtest(test_costmap_polygons test/costmap_polygons.test test/costmap_polygons.cpp)
  if(TARGET test_costmap_polygons)
     target_link_libraries(test_costmap_polygons costmap_converter)  
  endif()
endif()

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_drawing.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
